name: Lotto Report Auto-Deploy

設定排程：每天上午 9:00 執行 (台灣時間下午 5:00)
註: cron 時間是 UTC 時間。台灣時區為 UTC+8，所以 17點 (下午 5點) 對應 UTC 9點。
on:
schedule:
- cron: '0 9 * * *'

也可以手動觸發 workflow
workflow_dispatch:

jobs:
build-and-deploy:
runs-on: ubuntu-latest
steps:
# 1. 檢出程式碼 (將 GitHub 倉庫的檔案下載到雲端伺服器)
- name: Checkout Repository
uses: actions/checkout@v4

  # 2. 設定 Python 環境
  - name: Set up Python
    uses: actions/setup-python@v5
    with:
      python-version: '3.x'
      
  # 3. 安裝 Python 依賴 (這裡是執行 CSV 處理或爬蟲所需要的函式庫)
  - name: Install dependencies
    run: |
      # 這裡假設您的腳本需要 pandas 才能讀取或處理數據
      pip install pandas

  # 4. 運行您的數據腳本 (確保 history_data.json 是最新的)
  # 警告：此步驟是佔位符，在實際部署中您需要將您的爬蟲邏輯放在這裡，
  # 以確保 history_data.json 檔案是更新的。
  - name: Run Data Update Script (Placeholder)
    # 由於雲端無法存取您的本地 Excel，這個步驟需要您調整您的 update_539_integrated.py，
    # 讓它改為從網路上抓取最新的彩券數據。
    run: |
      echo "Simulating data update process..."
      # 範例: 如果您的 update_539_integrated.py 已經有爬蟲功能，請在這裡執行它
      # python update_539_integrated.py ... 
  
  # 5. 運行報告生成腳本 (讀取 JSON 並將數據嵌入 HTML)
  - name: Generate HTML Report
    run: python generate_html_report.py

  # 6. 將生成的報告部署到 GitHub Pages (這是讓手機看到網站的步驟)
  - name: Deploy to GitHub Pages
    uses: peaceiris/actions-gh-pages@v4
    with:
      github_token: ${{ secrets.GITHUB_TOKEN }}
      publish_dir: ./ # 部署整個專案目錄 (內含 historical_matrix.html)
      publish_branch: gh-pages # 部署到 gh-pages 分支
